




[{"content":" h1 table part 1 # test !!fds\nh2 table part 2 # test !!!\n","date":"2025-03-15","externalUrl":null,"permalink":"/blogs/20250315/","section":"Blog!","summary":"\u003ch2 class=\"relative group\"\u003eh1 table part 1 \n    \u003cdiv id=\"h1-table-part-1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h1-table-part-1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!fds\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eh2 table part 2 \n    \u003cdiv id=\"h2-table-part-2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h2-table-part-2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!!\u003c/p\u003e","title":"Blog #2","type":"blogs"},{"content":" h1 table part 1 # test !!fds\nh2 table part 2 # test !!!\n","date":"2025-03-11","externalUrl":null,"permalink":"/about/","section":"欢迎来到 Blowfish! 🎉","summary":"\u003ch2 class=\"relative group\"\u003eh1 table part 1 \n    \u003cdiv id=\"h1-table-part-1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h1-table-part-1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!fds\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eh2 table part 2 \n    \u003cdiv id=\"h2-table-part-2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h2-table-part-2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!!\u003c/p\u003e","title":"About","type":"page"},{"content":" h1 table part 1 # test !!fds\nh2 table part 2 # test !!!\n","date":"2025-03-11","externalUrl":null,"permalink":"/blogs/20250311/","section":"Blog!","summary":"\u003ch2 class=\"relative group\"\u003eh1 table part 1 \n    \u003cdiv id=\"h1-table-part-1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h1-table-part-1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!fds\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eh2 table part 2 \n    \u003cdiv id=\"h2-table-part-2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h2-table-part-2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!!\u003c/p\u003e","title":"Blog #1","type":"blogs"},{"content":" h1 table part 1 # test !!fds\nh2 table part 2 # test !!!\n","date":"2024-03-22","externalUrl":null,"permalink":"/blogs/20250323/","section":"Blog!","summary":"\u003ch2 class=\"relative group\"\u003eh1 table part 1 \n    \u003cdiv id=\"h1-table-part-1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h1-table-part-1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!fds\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eh2 table part 2 \n    \u003cdiv id=\"h2-table-part-2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h2-table-part-2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!!\u003c/p\u003e","title":"Blog #3","type":"blogs"},{"content":" 电力是如何工作的？ # 电压是如何工作的？ # 电流是如何工作的？ # 交流电是如何工作的？ # 电容器是如何工作的？ # ","externalUrl":null,"permalink":"/projects/toycomputer/part3-physics/electricity/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003e电力是如何工作的？ \n    \u003cdiv id=\"%E7%94%B5%E5%8A%9B%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%94%B5%E5%8A%9B%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"mc979OhitAg\" playlabel=\"mc979OhitAg\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e电压是如何工作的？ \n    \u003cdiv id=\"%E7%94%B5%E5%8E%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%94%B5%E5%8E%8B%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"w82aSjLuD_8\" playlabel=\"w82aSjLuD_8\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e电流是如何工作的？ \n    \u003cdiv id=\"%E7%94%B5%E6%B5%81%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%94%B5%E6%B5%81%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"kcL2_D33k3o\" playlabel=\"kcL2_D33k3o\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e交流电是如何工作的？ \n    \u003cdiv id=\"%E4%BA%A4%E6%B5%81%E7%94%B5%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%BA%A4%E6%B5%81%E7%94%B5%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"4oRT7PoXSS0\" playlabel=\"4oRT7PoXSS0\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\u003clite-youtube videoid=\"iIqhAX0I7lI\" playlabel=\"iIqhAX0I7lI\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e电容器是如何工作的？ \n    \u003cdiv id=\"%E7%94%B5%E5%AE%B9%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%94%B5%E5%AE%B9%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"X4EUwTwZ110\" playlabel=\"X4EUwTwZ110\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"Electricity","type":"projects"},{"content":" 从 0 到 1 的学习,构建一个陈旧,简单的操作系统. ","externalUrl":null,"permalink":"/projects/toycomputer/","section":"All Projects","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  从 0 到 1 的学习,构建一个陈旧,简单的操作系统.\n\u003c/div\u003e\n\n\u003chr\u003e","title":"Homemade OS","type":"projects"},{"content":" h1 table part 1 # test !!fds\nh2 table part 2 # test !!!\n","externalUrl":null,"permalink":"/projects/games/sokoban/sokoban1/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eh1 table part 1 \n    \u003cdiv id=\"h1-table-part-1\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h1-table-part-1\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!fds\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eh2 table part 2 \n    \u003cdiv id=\"h2-table-part-2\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#h2-table-part-2\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003etest !!!\u003c/p\u003e","title":"Sokoban Info","type":"projects"},{"content":" What is Boolean Algebra # 什么是布尔代数？我们知道初等代数是什么，比如 y = 3x + 1, y = 3x^2 + 2x + 3 它们往往都可以在一个 2 维坐标中转变为一个对应的图形。比如 y = x^2 -x - 2 对应如下图形:\n那布尔代数呢？在初等代数中我们的 x 变量可以取任何数值，但是在布尔代数中变量的值只能是 true or false. 并且对变量可以使用的操作只有 not, and, or 三种.\n我们知道初等代数表达式中的 Y 对应 X 为某一值时的一个数值结果. 那么布尔表示式是什么样子的以及其目的是什么呢？\nY = AB + (!A)B 就是一个布尔表达式，代表一个两参数的 logic function. 由于变量 A，B 只能是 1 or 0, 所以任意布尔表达式都对应一个真值表，就如初等代数表达式对应个图一样。在真值表中我们会列出两个参数所有的可能，由于每个参数的值只有两种情况，所以一共有2^(n) 种情况，如下图:\n其中 Y 表示所有参数在指定具体值时，计算整体表达式产出的结果, 其仍然是 true or false.\nStandard forms # 任何布尔表达式都可以转为标准格式，无论是通过 Boolean Algebra axiom 来推理出，还是根据真值表来分析出来. 存在有两种标准形式分别是 SOP, POS.\n下面我会的根据简单的 Y = A + B 布尔表达式的真值表来解释两种形式.\nSOP(sum of products) # 对于具有 N 个参数的布尔表达式，\nsum: 指一个或多个参数参与的 or 表达式, 比如 A + B, !A + B, A 都是.\nproduct: 指一个或多个参数参与的 and 表达式, 比如 AB, (!A)B, A(!B), A, !A 都是.\nminterm: 指所有参数都参与的 and 表达式，比如 AB, (!A)B，而 A, !B 并不是.\n我们只需要为所有 Y = true 的参数写下对应的 product 表达式，该表达式只有在为该参数时才是 true，所有这样的 minterm's sum 就是 SOP.\nSOP = m1 + m2 + m3 = (!A)B + A(!B) + AB\nPOS(prodcts of sum) # 对于具有 N 个参数的布尔表达式，\nmaxterm: 指所有参数都参与的 or 表达式，比如 A + B, !A + B, 而 !A, B 并不是.\n我们只需为所有 Y = false 的参数写下对应的 sum 表达式，该表达式只有在为该参数时才是 false，所有这样的 maxterm's products 就是 POS.\nPOS = M0 = (A + B)\nAbstract Layer Happen! # 对于任何组合电路，我们都可以为其写出真值表，并转为一个布尔标准表达式.\n所以在后续讨论各类功能电路时，我们不在考虑具体实现细节，而是专注于布尔表达式和其真值表上!\n我们如此尽快的避免讨论具体的电路实现细节，是因为这样对后续的学习更加高效，但是也会遗漏很多电路细节. 如果你想手搓一个 CPU，那么需要面对更对的电路细节问题.\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/boolean-algebra/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eWhat is Boolean Algebra \n    \u003cdiv id=\"what-is-boolean-algebra\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-is-boolean-algebra\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e什么是布尔代数？我们知道初等代数是什么，比如 \u003ccode\u003ey = 3x + 1, y = 3x^2 + 2x + 3\u003c/code\u003e 它们往往都可以在一个 2 维坐标中转变为一个对应的图形。比如 \u003ccode\u003ey = x^2 -x - 2\u003c/code\u003e 对应如下图形:\u003c/p\u003e","title":"布尔代数","type":"projects"},{"content":" 组合电路 # 组合电路的特点是，不存储任何信息，其输出完全依赖于当前的输入.\n时序电路 # 时序电路的特点是，其可以存储信息，其输出不仅仅依赖于当前的输入，还依赖于之前的输入.\n","externalUrl":null,"permalink":"/projects/toycomputer/part5-circuits/circuit-type/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003e组合电路 \n    \u003cdiv id=\"%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e组合电路的特点是，不存储任何信息，其输出完全依赖于当前的输入.\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e时序电路 \n    \u003cdiv id=\"%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e时序电路的特点是，其可以存储信息，其输出不仅仅依赖于当前的输入，还依赖于之前的输入.\u003c/p\u003e","title":"电路类型","type":"projects"},{"content":" 图灵在他的论可计算数及其在判定性问题上的应用论文中，通过创建了名叫图灵机的抽象机器，来辅助解决可判定性问题。\n该论文的目的在证明判定性问题是不可能存在通用算法的，这个结果就是通过证明图灵机不能干什么来反证的！\n在我看来这个论文的结果在图灵机的衬应下变的无足轻重，因为在图灵发表论文前该问题已经被其他人证明过了! 而在论文中由图灵机概念构建出的通用图灵机，简直就是现代计算机的雏形(提出了关于通用计算，指令，编程等等概念!)。\n它改变了人们对计算机的看法。同时代其他人认为一台用来求微分方程数值解的机器的基础逻辑，与一台为百货店制作账单的机器的逻辑相同，是不可能的! 而图灵认为数字计算机的特殊性在于它们能够模拟任何离散状态的机器。为描述这一点，我们称之为通用机。有了具备这一特性的机器，我们就能得到一个重要的结果：如果不考虑速度，那么就不需要对不同的计算过程设计不同的机器。通过对每个事件恰当编程，所有的工作可以在一台机器上完成。在这种意义下，所有的数字计算机都是等价的。\n所以到底什么是通用图灵机呢？ 可以编程，模拟任何离散状态的通用机器!\n构建图灵机的背景是什么? # 图灵描述了一个虚构的可以做一些简单操作的计算机, 并且断言它在功能上等价于一个进行数学运算的人。这台计算机就是图灵机，任何能由图灵机计算出的数都被称为可计算数，并且每一台图灵机都 可以用一个整数来描述称之为描述数。\n什么是可计算数? # 可计算数是指那些小数表达式可以通过有限步骤(也就是可以通过算法来计算的数)计算出来的数。我在这里只能给出一个对可计算数范围的简要概括，它是实数的子集，是可数的，包括有理数，代数数的实部，部分超越数。\n图灵机到底啥样的? # 在这里我们应该把图灵机想象成一个做计算的人，而非特定的某一图灵机实现，因为图灵机并不针对任何具体实现，而是一个虚拟的，抽象的概念。\n所以，当谈及图灵机所具备的类似机器指令的m-configurations时，我们将其抽象的称之为status\n图灵机是用于计算可计算数的机器，以下是图灵对其主体结构的描述:\n我们可以将一个正在进行实数计算的人比作一台只能处理有限种情况q1, q2, q3,…, qR的机器，这些情况称为m-configurations。 该机器配有“纸带”（可以与纸类比）。纸带穿过机器运转，同时被分成一个个区段（称作“方格”），每个方格中都可以放置一个符号。 任何时刻，只有一个方格，比如说第r个，它里边的符号是“在机器里”的，我们可以称这个方格为“扫描格”，扫描格中的符号可以称为“扫描符”。可以这么说，“扫描符”是机器当前唯一可以“直接感知”的符号。 机器在任何时候可能的行为都是由当前的m-configurations qn和扫描符r决定的。这对qn与r的组合称为configuration。因此，configuration决定了机器可能的行为。 在某些configuration里，扫描格为空（即里边没有符号），机器会在这个扫描格写下一个新的符号，在其它configuration中则可能会擦除这个扫描符。机器也可以改变正被扫描的方格，但只能移到左边或右边一格。 除了这些操作外，m-configuration也可能会变化。有一部分写下的符号将组成一串数字序列(F 格)，即被计算实数的小数表达；另一部分则是用来“协助记忆”的草稿(E 格)。只有这些草稿才可以被擦除。 在机器运转中的任何阶段，被扫描方格的标号、纸带上所有符号构成的序列以及m-configuration，共同描述了这个阶段的complete configuration。 图灵声称以上这些操作包括了在计算数字中用到的所有操作 WoW。\n图灵还给出了这样的定义:\n自动机: 如果机器在每一阶段的动作完全由configuration所决定，我们称这样的机器为“自动机”。也就是该程序不接收任何外部的输入，行为完全由configuration来决定。 computing machines: 如果一台自动机打印两种符号，第一类符号（称为数字）完全由0和1组成（其他符号称为第二类符号），那么这样的机器就称为计算机器。 如果给机器装上空白纸带，并且从正确的初始m-configuration开始运转，那么机器打印出的第一类符号组成的子序列就叫做“机器计算出的序列”. 如果一台计算机器只能写下有限个第一类符号，它就被称为是循环的（circular），否则称为非循环的（circle-free）。如果一台机器运行到了某个不能移动的configuration上，或者它能继续移动并有可能打印出第二类符号但永远不能打印出第一类符号了，那么它就是循环的。 如果一个序列可以被非循环机计算出来，那么它就是可计算序列。如果一个数与非循环机计算出来的数只相差一个整数，那么它就是可计算数。 以上这些描述可以给我们一个图灵机的整体感觉，但是还不明确到底是个什么东西，接下来通过了解图灵如何在纸上来定义一台简单的图灵机，进一步搞清楚图灵机到底是个什么东西！\n计算 1/3 的图灵机例子 # 可以这样理解这个表（以及接下来所有这类表）：对于前两列中描述的configuration(scaned symbol + m-configuration)，第三列的操作会被陆续执行。然后机器会转到最后一列的m-configuration。\n在这里说一些细节，有助于理解图灵所定义的图灵机：\n图灵希望他的机器只使用相间的方格来打印数字序列，而非连续的，间隔的方格用于当作类似便伐的作用。 None 代表无任何字符 从这个简单的例子我们能马上发现两个重要特征：条件分支, 循环.\n以下是这个机器运行的步骤: 所计算出来的是一个小数位表达式，如果在其前面加上 0. 那它就是 0.010101010101\u0026hellip;\u0026hellip; 也就是 1/3 的二进制表达式.\n如果你认为图灵机只能做这些简单的事情，那么你就错了，试着弄明白下面这个计算 01011011101111011111\u0026hellip;\u0026hellip; 数字的图灵机吧，它很大概率是个超越数！\n子程序 # 很快图灵就发现，有些过程几乎所有的机器都使用，并且在一些机器中，这些过程会在很多情况下使用。这些过程包括复制符号序列、比较序列、删除某一形式的所有符号等。\n与是他就提出了 Abbreviated tables, 也就是子程序(函数， 方法)的概念，我们可以把常用的 m-configuration 改造成可以传递参数的函数形式! 但是我们要明白，它并不是必不可少的，我们完全可以把它转变会完整的表格!\n注意 print-digit(a) 中的 a 参数在 print-digit(a) \u0026amp; none 时的 configuration 中被打印了出来! 并且这个参数类型没有任何的限制，我们可以传递符号，也可以传递m-configuration.\n图灵完备性 # 图灵完备性（Turing Completeness）是计算理论中的一个概念，指一种系统或编程语言是否具有与图灵机等同的计算能力。如果一个系统是图灵完备的，它理论上就可以执行任何计算操作，只要给它足够的时间和内存。 图灵完备性指的是一个系统能够：\n执行条件分支（如if...else...语句） 进行循环或递归（如while、for循环，或递归函数） 只要具备这两个基本功能，一个系统就能计算出任意算法，换句话说，它可以模拟一个通用图灵机。 通用图灵机是什么? # 发明一台可以计算任何可计算序列的机器是可能的。如果为机器U提供一条纸带，纸带开头写入的是某台计算机器M的标准描述，那么U可以计算出与M相同的序列。\n也就是通用图灵机可以根据其它计算机的描述，来模仿他们，输出与他们一致的可计算数。我们可以通过修改该描述来让通用计算机模仿不同的计算机，也就是通用机是可编程的！\n至于它的具体实现，后续文章会进行分析！\n只是计算数字？ # 看完下面这句话，你就会有一种 Mind Blow 的感觉：\n现在的程序员很自然地就能想到可以表示成数的计算机程序，因为一个程序的可执行文件只是一些连续的字节。通常我们不会把这些字节当作简单的数，但其实是可以的。例如，MS Word 2003的可执行文件是WinWord.exe，其大小为12 047 560字节。它大约包含9600万位，或者2900万十进制位，因此表示WinWord.exe的数接近1029 000 000。这的确是一个很大的数。如果在一本每页有50行的书里，按每行打印50位写下这个数，那么它要占用11 000多页。这是一个比著名的googol（即10的100次方）更加巨大的数，但是它仍然是一个有限数。WinWord.exe只是在枚举整数的过程中出现的众多可执行程序（好比所有可能的图灵机）之一，同时我们还会枚举出其他所有的文字处理软件，甚至是那些还没编写好的。\n在现代计算机中，一切都是通过数字来表示的, 无论是图片， 视频， 还是软件. 我们能做的无非就是计算下一个数字而以, 新时代创造的技术在图灵机上得到了更加完美的展示！\n","externalUrl":null,"permalink":"/projects/toycomputer/part2-turing/turing-machine/","section":"All Projects","summary":"\u003cdiv\n  \n    class=\"flex px-4 py-3 rounded-md bg-primary-100 dark:bg-primary-900\"\n  \u003e\n\n  \u003cspan\n    \n      class=\"text-primary-400 ltr:pr-3 rtl:pl-3 flex items-center\"\n    \u003e\n\n    \n\n  \u003cspan class=\"relative block icon\"\u003e\n    \u003csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"\u003e\u003cpath fill=\"currentColor\" d=\"M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z\"/\u003e\u003c/svg\u003e\n\n  \u003c/span\u003e\n\n\n  \u003c/span\u003e\n\n  \u003cspan\n    \n      class=\"dark:text-neutral-300\"\n    \u003e\u003cp\u003e图灵在他的\u003cstrong\u003e论可计算数及其在判定性问题上的应用\u003c/strong\u003e论文中，通过创建了名叫图灵机的抽象机器，来辅助解决可判定性问题。\u003c/p\u003e","title":"图灵机是什么？","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part1-intro/","section":"All Projects","summary":"\u003chr\u003e","title":"项目介绍","type":"projects"},{"content":" 这个项目要干什么? # 我感到非常无聊，让我们在计算机中找点乐子吧。我承认目前我只是一个擅长 CRUD 的码农，这也勾起了我对它的兴趣，让我更想知道它能给我带来什么样子的体验!\n所以, 我的目标是在学习，开发过程中，主要根据课程，书籍，等一切资源搭建起操作系统各个关键组件, 比如计算机本身(虚拟化)，操作系统，网络堆栈，编译器，数据库，GUI Desktop\u0026hellip;\u0026hellip;\n如何实现? # 我为什么认为这个项目是可以实现的？一个 CRUD 仔如何实现这一切？\n其一, 是因为我的主要目标是学习, 对最终的产物并没有太高的标准, 我只想走一遍我本该在大学就走完的路, 这些产物本就是每个课程对应的实验课产物，我要做的是将它们缝合起来!\n其二, 我相信计算机的简单性, 所以整个过程我将通过 First Principle 来去学习它, 并通过抽象来管理整体的复杂性. 但是计算机操作系统和理论上的图灵机还是有完全不同的性质，图灵机相关理论是通过数学公式来推理出来，但是计算机操作系统则是具体的 Software，它是由软件工程师编写，迭代出来的，所以在学习过程中更多的是解构一个计算机操作系统，而非去设计，因为那对我而言是不可能完成的!\n参考资料 # Project Part Book Course Other Turing Machine The Annotated Turing Physics The Engineering Mindsert(Youtube) Device The Engineering Mindsert(Youtube) Circuits Digital Design and Computer Architecture Logic Digital Design and Computer Architecture Logic Introduction to Computing System Logic Computer System: A Programmer\u0026rsquo;s Perspective Computer Architecture ISA Operating System Compiler Computer Network ","externalUrl":null,"permalink":"/projects/toycomputer/part1-intro/info/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003e这个项目要干什么? \n    \u003cdiv id=\"%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E8%A6%81%E5%B9%B2%E4%BB%80%E4%B9%88\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E8%A6%81%E5%B9%B2%E4%BB%80%E4%B9%88\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e我感到非常无聊，让我们在计算机中找点乐子吧。我承认目前我只是一个擅长 CRUD 的码农，这也勾起了我对它的兴趣，让我更想知道它能给我带来什么样子的体验!\u003c/p\u003e\n\u003cp\u003e所以, 我的目标是在学习，开发过程中，主要根据课程，书籍，等一切资源搭建起操作系统各个关键组件, 比如计算机本身(虚拟化)，操作系统，网络堆栈，编译器，数据库，GUI Desktop\u0026hellip;\u0026hellip;\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003e如何实现? \n    \u003cdiv id=\"%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e我为什么认为这个项目是可以实现的？一个 CRUD 仔如何实现这一切？\u003c/p\u003e","title":"项目介绍","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part4-device/vacuum-tubes/","section":"All Projects","summary":"\u003clite-youtube videoid=\"kRSiTog2-No\" playlabel=\"kRSiTog2-No\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"真空管","type":"projects"},{"content":" Games! ","externalUrl":null,"permalink":"/projects/games/","section":"All Projects","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Games!\n\u003c/div\u003e\n\n\u003chr\u003e","title":"Games!","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part4-device/semiconductor/","section":"All Projects","summary":"\u003clite-youtube videoid=\"Fwj_d3uO5g8\" playlabel=\"Fwj_d3uO5g8\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"半导体","type":"projects"},{"content":"我们知道电容可以储备电子，那么在电路中又该如何储备 bit 呢？\nR-S Latch # R-S Latch 由两个相联的 NAND Gate 组成，它的特性如下:\n只能存储 1 bit 信息，该信息从 a 出输出. 不能同时将 S, R 设置为 0，否则存储的 bit 处于不确定状态. 当为 S 端输入 0 时，a 输出 1，我们称之为 setting. 当为 R 端输入 1 时，a 输出 0，我们成指为 resetting. 该电路非常简单，其真值表如下:\nInput S Input R a(store value) 0 0 invalid 0 1 1 1 0 0 1 1 previous state 当开启电路时，我们一般并不关注其默认值是什么，主需要关注 setting and resetting 即可！\nGated D Latch # Gate D Latch 由两个 NAND GATE 和一个 R-S Latch 组成。其属于 R-S Latch 的加强版本，便于时用。其特性如下:\nD 输入想要存储的值, WE 即 Write Enable 开关. 该电路更加简单，其真值表如下:\nInput D Input WE Store Value 0 0 previous state 1 0 previous state 0 1 0 1 1 1 Flip-Flop # 该存储单元主要用于带有 Clock Signal 组件的时序电路中. 由于在 ONE Clock Cycle 中，电压状态会产生变化, 而我们想还要存储的值在 ONE Clock Cycle 开始时刻设置，其余时刻保持不变.\n如果我们直接把 Clock Signal 连接到 Gate D Lacth 上，那么其值有可能产生波动， 因为有一半的时间 WE 一直处与开启状态。\n而 Flip-Flop 解决了这个问题，其只有 ONE Clock Cycle 开始时刻 D 输入才有效!\nMemory # Memory 是由一大堆 Storage Elements, Some Gate 组成的 Addressability 可寻址存储矩阵.\nAddressability: 可寻址指我们可以通过二进制数字标识出存储矩阵中的任何一个最小存储单元. 最小存储单元一般都是 byte. Address Space: 地址空间指存储矩阵中所有唯一地址标识的个数。比如 8GB Memroy 对应的 Address Space 就是 2^32, 其中任何一个地址标识都需要用 32bit 来表示。 我们也称 32 bit 为该计算机的 Word Size. 下面是一个 2^2-3-Bit Memory:\n最小可寻址单元为 3Bit，也就是每一行是一单元. 该电路很简单.\n其中 Decoder 是一个 n Bit 输入，2^n Bit 输出的电路，可用于寻址, 其真值表如下.\nA B Output 0 0 0001 0 1 0010 1 0 0100 1 1 1000 而 MUX 在这里就是通过 AND Gate, OR Gate 实现的，比较简单.\n以下是地址为 11 的有效路径图:\n","externalUrl":null,"permalink":"/projects/toycomputer/part5-circuits/storage-circuit/","section":"All Projects","summary":"\u003cp\u003e我们知道电容可以储备电子，那么在电路中又该如何储备 \u003ccode\u003ebit\u003c/code\u003e 呢？\u003c/p\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eR-S Latch \n    \u003cdiv id=\"r-s-latch\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#r-s-latch\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i0.png\" alt=\"i0\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003eR-S Latch 由两个相联的 \u003ccode\u003eNAND Gate\u003c/code\u003e 组成，它的特性如下:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e只能存储 1 bit 信息，该信息从 a 出输出.\u003c/li\u003e\n\u003cli\u003e不能同时将 S, R 设置为 0，否则存储的 bit 处于不确定状态.\u003c/li\u003e\n\u003cli\u003e当为 S 端输入 0 时，a 输出 1，我们称之为 \u003ccode\u003esetting\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e当为 R 端输入 1 时，a 输出 0，我们成指为 \u003ccode\u003eresetting\u003c/code\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e该电路非常简单，其真值表如下:\u003c/p\u003e","title":"记忆电路","type":"projects"},{"content":" 如何使用 0, 1 表达数字? # 图灵机就是用 0, 1 来表达数字的，并且它的目的就是计算数字。二进制和十进制没有什么不同，唯一的差别就是我们更加熟悉十进制而以，我们可以使用与计算十进制的加法，减法，除法，乘法时一样的方式在 纸上计算二进制数字，尝试计算一下 11b * 11b = ? 和 01b / 11b = ?, 之后你会发现两者没有什么不同。\n但是图灵机毕竟只是一个非常抽象的概念，它并不需要思考机器的具体实现。但是我们目前的目标是在数字计算机电路中来表示数字。图灵机的纸带是无止尽得，正是如此他才能描述出 1/3 在二进制下的无穷 小数位。但是任何计算机的内存都是有限的，我们需要规范数字在逻辑电路中逻辑表达!\nWord Size \u0026amp; Data Type # 任何计算机都有 Word Size, 它指表示内存地址所需要的数据大小。比如 32-bit word size 最大能标识的内存地址是 4GB, 64-bit word size 则是 4GB * 4GB.\n任何的 ISA(instruction set architecture) 都有其自己的Data Type Set，其中会包括地址，整数，浮点数\u0026hellip;\nOrdering # 我们可以把计算机内存想象成一个字节数组，因为计算机最小的可寻址单位就是字节。那么一个数字的存储方向就自然有两种选择，big endian, little endian, 如果把整个内存作为字节数组看成索引(地址) 递增的，从左至右的一个纸带。那么 big endian 就是将数字从左到右来写，而 little endian 则是从右往左写。可以把 big 看成高位，little 看成低位。以下是 0x01234567 分别在两种 ordering 下的表示。\n一点需要记住的是，可寻址的最小单位是字节，所以 big endia 和 little endian 并不是简单的 reverse every bits!\nInteger Data Type # Unsigned Integers # logic representations # 和十进制表示一样，但是无法表示负数。\ndigital limit # 对于 4-bit Unsigned Integer，当想加的两数过大会导致溢出，如下:\nSigned Integers # logic representations # 有符号整数一般使用二进制补码表示(Two\u0026rsquo;s-complement number)，对于一个 8-bit 二进制补码而言，其最高位如果为 1 则表示为 -128 否则为 0，其余位值都为正数，补码对应的数值就是两者之和。\n对于任何二进制数而言，如果想要用二进制补码来表示其对应的负数，那么转换方式为: every bit reverse, and pluse one.\ndigital limit # 对于二进制补码表示的 Signed Integer 有两种溢出可能:\n负数溢出，表现为: 负数 + 负数 \u0026gt; 0 正数溢出，表现为: 正数 + 正数 \u0026lt; 0 Float Data Type # 有一点必须要先搞明白，浮点数相较于整数的不同是什么?\n相同 bit 长度，整数能够更加精确的表示一个数字，而浮点数可以表示尽可能大范围的数字. 比如 5 * 2^(20) 如果我们用整数来表示，它需要在 101 后跟上20个 0 来表示，需要 23 bit。 而这些 0 我们完全可以通过记录指数大小来表示。所以浮点数通过丧失些许精度，将一部分 bit 用于描述指数大小，来在相同 bit 长度下表示更大范围的数字.\n二进制小数和十进制一样， 0.1 表示 1/2, 0.01 表示 1/4 以此类推，我们可以明确的得知 1/3 无法在浮点数中准确表示，因为我们没有图灵机的无限长度纸带。所以浮点数大部分都不是准确的, 而是根据精度而近似的数据，由此对浮点数的一些运算造成了极大的影响。这也是我们为什么不用浮点数来计算金额等数据，而是使用专有的浮点数计算类库.\n以下是对 IEEE(eye-triple-ee) 754 所定义的浮点数的分析\nlogic representations # V = (-1)^s * M * 2^E\ns 指符号位，决定了浮点数的正负. M 指小数部分大小，其属于 0 ~ 1 或 1 ~ 2 E 指指数部分大小，可能为负数 根据表示 M 和 E 的长度的不同，存在单精度，双精度两种浮点数字.\nIEEE 754 又根据 E，M 的数值把浮点数分成了 3 种类型:\n以下我们分析单精度浮点数在 3 种类型下的表现:\nCase 1 Normalized # E(-126 ~ 127) = e - Bias, e 为 E 部分二进制数据对应的 Unsigned Integer, Bias 为 2^(8-1) -1 = 127\nM(1 ~ 2)，其中 frac 部分表示小数部分，而这个 1 我们并不存储，而是假定整数位始终为 1\nCase 2 Denormalized # E(-126) = 1 - Bias\nM(0 ~ 1) = frac value\n在 Case 2 中存在 +0.0 和 -0.0.\nCase 3 SPECIAL Values Infinity \u0026amp; NaN # 这里存在 正无穷和负无穷，可以用来表示溢出的计算结果.\nNaN 则表示 Not a Number, 用作表示某些操作无法计算出实数.\n其实 Case 1 和 Case 2 之间过渡的还是比较流畅的!\ndigital limit # Rounding, 对于无法精确表示的数字会进行 rounding，IEEE 提供了 4 中 rounding 模式:\n这也就是为什么在不溢出的情况下，浮点数不满足结合律，而整数满足. 因为 rounding 的存在会导致结合律失效。\n比如 (3.14 + 1e10) - 1e10 = 0 而 (1e10-1e10) + 3.14 = 3.14\n因为 rounding 直接把 0.000000000314 约掉了。记住是在其二级进制形式下约掉的，因为0.314 在二进制中是无法精确表示的!\n这句话有问题，需要详细了解浮点数溢出，指数对齐等导致精度丢失的过程!\n由于浮点数计算的限制性，业务中千万不要使用浮点数，而是使用专有类库计算小数.\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/number-system/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003e如何使用 0, 1 表达数字? \n    \u003cdiv id=\"%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-0-1-%E8%A1%A8%E8%BE%BE%E6%95%B0%E5%AD%97\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-0-1-%E8%A1%A8%E8%BE%BE%E6%95%B0%E5%AD%97\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e图灵机就是用 0, 1 来表达数字的，并且它的目的就是计算数字。二进制和十进制没有什么不同，唯一的差别就是我们更加熟悉十进制而以，我们可以使用与计算十进制的加法，减法，除法，乘法时一样的方式在\n纸上计算二进制数字，尝试计算一下 \u003ccode\u003e11b * 11b = ?\u003c/code\u003e 和 \u003ccode\u003e01b / 11b = ?\u003c/code\u003e, 之后你会发现两者没有什么不同。\u003c/p\u003e","title":"数字系统","type":"projects"},{"content":"","externalUrl":null,"permalink":"/projects/toycomputer/part2-turing/","section":"All Projects","summary":"","title":"图灵机","type":"projects"},{"content":" 抽象 + 第一性原理 + 解构 # 这个项目的内容规划本身也是非常的复杂的, 因为它的目的是掌握另一件本就复杂的事物!\n以下两张图从两个不同视角分解计算机, 我们可以有效的对其进行解构，并通过抽象进行封装。\n我目前对内容规划的想法就是, 首先尽可能掌握最基础的知识, 然后对掌握的知识进行抽象封装, 充当上一层的第一性公理系统. 然后不断循环，吸收知识, 产出内容.\n上图遗漏最为关键的一个问题，What computers can do? 一台通用计算机可以做什么呢? 计算机就如提线木偶, 而这个问题就如那根串联各个组件的细线. 由于个人对这个问题的忽略，导致我长久以来只是盲目的认同 计算机能做什么, 而并不清楚他到底能做什么!\n而这个问题是无法放到以上两个视图之下的，因为这个问题的答案是构建一台计算机的前提, 而这块内容的代表就是图灵机!\n项目规划 # Code Project # Universal turing machine Binary Game Turing machine # Turing machine Physis # Electric current Device # Semiconductor Transistor Circuits # Storage Circuit Crystal Oscillator Logic # Number system Logic Circuit Elements ","externalUrl":null,"permalink":"/projects/toycomputer/part1-intro/plan/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003e抽象 + 第一性原理 + 解构 \n    \u003cdiv id=\"%E6%8A%BD%E8%B1%A1--%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86--%E8%A7%A3%E6%9E%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%8A%BD%E8%B1%A1--%E7%AC%AC%E4%B8%80%E6%80%A7%E5%8E%9F%E7%90%86--%E8%A7%A3%E6%9E%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e这个项目的内容规划本身也是非常的复杂的, 因为它的目的是掌握另一件本就复杂的事物!\u003c/p\u003e\n\u003cp\u003e以下两张图从两个不同视角分解计算机, 我们可以有效的对其进行解构，并通过抽象进行封装。\u003c/p\u003e\n\u003cp\u003e我目前对内容规划的想法就是, 首先尽可能掌握最基础的知识, 然后对掌握的知识进行抽象封装, 充当上一层的第一性公理系统. 然后不断循环，吸收知识, 产出内容.\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg\n        class=\"my-0 rounded-md\"\n        loading=\"lazy\"\n        srcset=\"\n        /projects/toycomputer/part1-intro/plan/computer-struct_hu_98658fc591ea7dae.png 330w,\n        /projects/toycomputer/part1-intro/plan/computer-struct_hu_10b4a12848e149d.png 660w,\n        /projects/toycomputer/part1-intro/plan/computer-struct_hu_fd78c4e6b547fc57.png 1024w,\n        /projects/toycomputer/part1-intro/plan/computer-struct_hu_a8a5e0f386d294ee.png 2x\"\n        src=\"/projects/toycomputer/part1-intro/plan/computer-struct_hu_10b4a12848e149d.png\"\n        alt=\"computer-struct\"\n      /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e","title":"项目计划","type":"projects"},{"content":" What is decoder? # Type: Combinational Logic Circuits # Input: n Bit # Output: 2^n Bit # function: 将 n bit 无符号二进制整数解析为一个 2^n bit 长的唯一标识. # Boolean Expression # Y0 = !A!B\nY1 = !AB\nY2 = A!B\nY3 = AB\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/decoder/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eWhat is decoder? \n    \u003cdiv id=\"what-is-decoder\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-is-decoder\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i13.png\" alt=\"i13\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eType: Combinational Logic Circuits \n    \u003cdiv id=\"type-combinational-logic-circuits\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#type-combinational-logic-circuits\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eInput: n Bit \n    \u003cdiv id=\"input-n-bit\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#input-n-bit\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eOutput: 2^n Bit \n    \u003cdiv id=\"output-2n-bit\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#output-2n-bit\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003efunction: 将 n bit 无符号二进制整数解析为一个 2^n bit 长的唯一标识. \n    \u003cdiv id=\"function-%E5%B0%86-n-bit-%E6%97%A0%E7%AC%A6%E5%8F%B7%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B4%E6%95%B0%E8%A7%A3%E6%9E%90%E4%B8%BA%E4%B8%80%E4%B8%AA-2n-bit-%E9%95%BF%E7%9A%84%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#function-%E5%B0%86-n-bit-%E6%97%A0%E7%AC%A6%E5%8F%B7%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B4%E6%95%B0%E8%A7%A3%E6%9E%90%E4%B8%BA%E4%B8%80%E4%B8%AA-2n-bit-%E9%95%BF%E7%9A%84%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eBoolean Expression \n    \u003cdiv id=\"boolean-expression\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#boolean-expression\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eY0 = !A!B\u003c/code\u003e\u003c/p\u003e","title":"Decoder","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part3-physics/","section":"All Projects","summary":"\u003chr\u003e","title":"基本物理概念","type":"projects"},{"content":" 晶体管是如果工作的？ # MOSFET 是如果工作的？ # ","externalUrl":null,"permalink":"/projects/toycomputer/part4-device/transistors/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003e晶体管是如果工作的？ \n    \u003cdiv id=\"%E6%99%B6%E4%BD%93%E7%AE%A1%E6%98%AF%E5%A6%82%E6%9E%9C%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E6%99%B6%E4%BD%93%E7%AE%A1%E6%98%AF%E5%A6%82%E6%9E%9C%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"J4oO7PT_nzQ\" playlabel=\"J4oO7PT_nzQ\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003eMOSFET 是如果工作的？ \n    \u003cdiv id=\"mosfet-%E6%98%AF%E5%A6%82%E6%9E%9C%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#mosfet-%E6%98%AF%E5%A6%82%E6%9E%9C%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"AwRJsze_9m4\" playlabel=\"AwRJsze_9m4\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"晶体管","type":"projects"},{"content":" 我们把每一个 0-1 以及下一个 0-1 电压转变时刻之间的周期称之为 ONE CLOCK CYCLE！\n","externalUrl":null,"permalink":"/projects/toycomputer/part5-circuits/oscillator/","section":"All Projects","summary":"\u003clite-youtube videoid=\"aJAZHPqEUKU\" playlabel=\"aJAZHPqEUKU\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i5.png\" alt=\"i5\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e我们把每一个 0-1 以及下一个 0-1 电压转变时刻之间的周期称之为 \u003ccode\u003eONE CLOCK CYCLE\u003c/code\u003e！\u003c/p\u003e","title":"振荡器","type":"projects"},{"content":" What is mux? # Type: Combinational Logic Circuits # Input: n Bit Data Input, log2(n) bit Select Input # Output: 1 Bit # function: 根据输入 S 选择输出 N Bit 输入中对应的某一个值. # Boolean Expression # Y = !S1!S2D0 + !S1S2D1 + S1!S2D2 + S1S2D3\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/mux/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eWhat is mux? \n    \u003cdiv id=\"what-is-mux\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-is-mux\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i14.png\" alt=\"i14\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eType: Combinational Logic Circuits \n    \u003cdiv id=\"type-combinational-logic-circuits\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#type-combinational-logic-circuits\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eInput: n Bit Data Input, log2(n) bit Select Input \n    \u003cdiv id=\"input-n-bit-data-input-log2n-bit-select-input\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#input-n-bit-data-input-log2n-bit-select-input\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eOutput: 1 Bit \n    \u003cdiv id=\"output-1-bit\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#output-1-bit\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003efunction: 根据输入 S 选择输出 N Bit 输入中对应的某一个值. \n    \u003cdiv id=\"function-%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5-s-%E9%80%89%E6%8B%A9%E8%BE%93%E5%87%BA-n-bit-%E8%BE%93%E5%85%A5%E4%B8%AD%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA%E5%80%BC\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#function-%E6%A0%B9%E6%8D%AE%E8%BE%93%E5%85%A5-s-%E9%80%89%E6%8B%A9%E8%BE%93%E5%87%BA-n-bit-%E8%BE%93%E5%85%A5%E4%B8%AD%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA%E5%80%BC\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eBoolean Expression \n    \u003cdiv id=\"boolean-expression\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#boolean-expression\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eY = !S1!S2D0 + !S1S2D1 + S1!S2D2 + S1S2D3\u003c/code\u003e\u003c/p\u003e","title":"Mux","type":"projects"},{"content":" PCB是如何工作的？ # 主板是如果工作的？ # ","externalUrl":null,"permalink":"/projects/toycomputer/part5-circuits/pcb/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003ePCB是如何工作的？ \n    \u003cdiv id=\"pcb%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#pcb%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"YJr-kHy6STg\" playlabel=\"YJr-kHy6STg\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\u003clite-youtube videoid=\"Ukc_kc5OAhw\" playlabel=\"Ukc_kc5OAhw\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\u003clite-youtube videoid=\"Z2LgmIGE2nI\" playlabel=\"Z2LgmIGE2nI\" params=\"\"\u003e\u003c/lite-youtube\u003e\n\n\n\n\u003ch2 class=\"relative group\"\u003e主板是如果工作的？ \n    \u003cdiv id=\"%E4%B8%BB%E6%9D%BF%E6%98%AF%E5%A6%82%E6%9E%9C%E5%B7%A5%E4%BD%9C%E7%9A%84\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#%E4%B8%BB%E6%9D%BF%E6%98%AF%E5%A6%82%E6%9E%9C%E5%B7%A5%E4%BD%9C%E7%9A%84\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003clite-youtube videoid=\"zxGqGCtPxn4\" playlabel=\"zxGqGCtPxn4\" params=\"\"\u003e\u003c/lite-youtube\u003e","title":"PCB","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part4-device/","section":"All Projects","summary":"\u003chr\u003e","title":"电路元件","type":"projects"},{"content":" What is full adder? # Type: Combinational Logic Circuits # Input: 1 bit A, 1 bit B, 1 bit C(carry) # Output: 1 bit sum, 1 bit carry # function: 将 A,B,C 相加，输出结果和进位值 # Boolean Expression # Y(sum) = A + B + C\nY(carry) = !ABC + A!BC + AB!C + ABC\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/full-adder/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eWhat is full adder? \n    \u003cdiv id=\"what-is-full-adder\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-is-full-adder\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i17.png\" alt=\"i17\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i18.png\" alt=\"i18\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eType: Combinational Logic Circuits \n    \u003cdiv id=\"type-combinational-logic-circuits\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#type-combinational-logic-circuits\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eInput: 1 bit A, 1 bit B, 1 bit C(carry) \n    \u003cdiv id=\"input-1-bit-a-1-bit-b-1-bit-ccarry\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#input-1-bit-a-1-bit-b-1-bit-ccarry\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eOutput: 1 bit sum, 1 bit carry \n    \u003cdiv id=\"output-1-bit-sum-1-bit-carry\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#output-1-bit-sum-1-bit-carry\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003efunction: 将 A,B,C 相加，输出结果和进位值 \n    \u003cdiv id=\"function-%E5%B0%86-abc-%E7%9B%B8%E5%8A%A0%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E5%92%8C%E8%BF%9B%E4%BD%8D%E5%80%BC\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#function-%E5%B0%86-abc-%E7%9B%B8%E5%8A%A0%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%E5%92%8C%E8%BF%9B%E4%BD%8D%E5%80%BC\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch2 class=\"relative group\"\u003eBoolean Expression \n    \u003cdiv id=\"boolean-expression\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#boolean-expression\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eY(sum) = A + B + C\u003c/code\u003e\u003c/p\u003e","title":"Full Adder","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part5-circuits/","section":"All Projects","summary":"\u003chr\u003e","title":"电路","type":"projects"},{"content":" ","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/","section":"All Projects","summary":"\u003chr\u003e","title":"Logic","type":"projects"},{"content":" What is PLA(aka.Programmable Logic Array)? # Type: Combinational Logic Circuits # Input: n bit you want # Output: n bit you want # function: 可用于实现任何布尔逻辑 # 任何组合逻辑电路都能转变为一个真值表，而 PLA 可以用于编程任何满足我们期望的真值表的功能. 其分为两部分:\nAND Array: n input 对应 2^n AND GATE, 其相当于真值表的每一行. OR Array: n output 对应 n OR GATE, 每个 OR GATE 相当于真值表的一个输出. 我们根据预期的真值表，把某一输出对应为 true 的所有 AND GATE 连接到其 OR GATE 上即可. Logical Completeness # 只需要通过 AND, OR, NOT 就可以实现所有布尔逻辑！原因很简单，那就是布尔代数中的操作只有 AND, OR, NOT haha!!\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/pla/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eWhat is PLA(aka.Programmable Logic Array)? \n    \u003cdiv id=\"what-is-plaakaprogrammable-logic-array\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-is-plaakaprogrammable-logic-array\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003cp\u003e\n    \u003cfigure\u003e\n      \u003cimg class=\"my-0 rounded-md\" loading=\"lazy\" src=\"./static/i20.png\" alt=\"i20\" /\u003e\n      \n    \u003c/figure\u003e\n\u003c/p\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eType: Combinational Logic Circuits \n    \u003cdiv id=\"type-combinational-logic-circuits\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#type-combinational-logic-circuits\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eInput: n bit you want \n    \u003cdiv id=\"input-n-bit-you-want\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#input-n-bit-you-want\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003eOutput: n bit you want \n    \u003cdiv id=\"output-n-bit-you-want\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#output-n-bit-you-want\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\n\n\u003ch4 class=\"relative group\"\u003efunction: 可用于实现任何布尔逻辑 \n    \u003cdiv id=\"function-%E5%8F%AF%E7%94%A8%E4%BA%8E%E5%AE%9E%E7%8E%B0%E4%BB%BB%E4%BD%95%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#function-%E5%8F%AF%E7%94%A8%E4%BA%8E%E5%AE%9E%E7%8E%B0%E4%BB%BB%E4%BD%95%E5%B8%83%E5%B0%94%E9%80%BB%E8%BE%91\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h4\u003e\n\u003cp\u003e任何组合逻辑电路都能转变为一个真值表，而 PLA 可以用于编程任何满足我们期望的真值表的功能. 其分为两部分:\u003c/p\u003e","title":"PLA","type":"projects"},{"content":" What is FSM? # a finite number of states a finite number of external inputs a finite number of external outputs an explicit specification of all state transitions an explicit specification of what determines each external output value. 比如下面这个例子:\n对于一个时用旋转按钮的密码锁，只有按照正确的方向连续转到指定的数值部分，锁才能打开。其密码是: R13(顺时针转到 13) -\u0026gt; L22(逆时针转到 22) -\u0026gt; R3(顺时针转到 3)\n4 个 State 6 个 external inputs: R13, L22, R3, R-other-then-L3, L-other-than-22, and R-other-than-3. external outputs: opened, locked 8 个 state transitions current state + external inputs 决定 next state 的输出 Synchronous VS Asynchronous FSM # FSM 状态转变发生在固定的间隔时，称之为同步有限状态机. 否则称之为异步有限状态机.\nSynchronous FSM 的时序都是由 Clock Signal 电路来驱动的! 它们产生如下固定频率的 Signal:\nStorage # 在时序电路中为了确保存储元件在 ONE CLOCK CYCLE 保持不变，需要使用 Storage 中的 Flip-Flop.\nAbstract Layer Happen! # 组合电路可以通过 Boolean Expression 来表示，而时序电路可以通过 Finite State Machine 或更加复杂的布尔表达式来表示.\n电路的 clock digram 太难看了，主要用于针对关键电路进行分析，而 FSM 可从业务的角度(更加抽象，脱离电路细节)来分析电路整体逻辑.\n","externalUrl":null,"permalink":"/projects/toycomputer/part6-logic/finite-state-machine/","section":"All Projects","summary":"\u003ch2 class=\"relative group\"\u003eWhat is FSM? \n    \u003cdiv id=\"what-is-fsm\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700\"\n            style=\"text-decoration-line: none !important;\" href=\"#what-is-fsm\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e        \n    \n\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003ea finite number of states\u003c/li\u003e\n\u003cli\u003ea finite number of external inputs\u003c/li\u003e\n\u003cli\u003ea finite number of external outputs\u003c/li\u003e\n\u003cli\u003ean explicit specification of all state transitions\u003c/li\u003e\n\u003cli\u003ean explicit specification of what determines each external output value.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e比如下面这个例子:\u003c/p\u003e","title":"有限状态机","type":"projects"},{"content":"","date":"2025-03-15","externalUrl":null,"permalink":"/tags/blog/","section":"标签","summary":"","title":"Blog","type":"tags"},{"content":"","date":"2025-03-15","externalUrl":null,"permalink":"/blogs/","section":"Blog!","summary":"","title":"Blog!","type":"blogs"},{"content":"Blowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\n在这里可以为每个分类添加额外的描述信息。查看下面的高级标签页面，了解更多。\n","date":"2025-03-15","externalUrl":null,"permalink":"/tags/","section":"标签","summary":"\u003cp\u003eBlowfish 支持基于 Hugo 的所有分类方法。同时，当前的标签预览页也支持展示自定义内容。\u003c/p\u003e\n\u003cp\u003e在这里可以为每个分类添加额外的描述信息。查看下面的\u003ca href=\"https://ivanioi.github.io/tags/advanced/\"\u003e高级标签\u003c/a\u003e页面，了解更多。\u003c/p\u003e\n\u003chr\u003e","title":"标签","type":"tags"},{"content":" (()-\u0026gt;{ int year = 2001; while(++year \u0026lt;= 2075) { reading(\u0026#34;stoicism\u0026#34;); loving(\u0026#34;?\u0026#34;); coding(); sleeping(); } })() ","date":"2025-03-15","externalUrl":null,"permalink":"/","section":"欢迎来到 Blowfish! 🎉","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                  \u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eyear\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e2001\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                  \u003c/span\u003e\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"n\"\u003eyear\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003e2075\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003ereading\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;stoicism\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003eloving\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;?\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003ecoding\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                    \u003c/span\u003e\u003cspan class=\"n\"\u003esleeping\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e                                \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                  \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"p\"\u003e})()\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003clite-youtube videoid=\"R9OCA6UFE-0\" playlabel=\"R9OCA6UFE-0\" params=\"width=500px\"\u003e\u003c/lite-youtube\u003e","title":"欢迎来到 Blowfish! 🎉","type":"page"},{"content":" Just for fun \u0026#x1f973; \u0026#x1f973; ","externalUrl":null,"permalink":"/projects/","section":"All Projects","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  Just for fun \u0026#x1f973; \u0026#x1f973;\n\u003c/div\u003e\n\n\u003chr\u003e","title":"All Projects","type":"projects"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/tags/circuit/","section":"标签","summary":"","title":"Circuit","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/computer/","section":"标签","summary":"","title":"Computer","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/device/","section":"标签","summary":"","title":"Device","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/electricity/","section":"标签","summary":"","title":"Electricity","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/firebase/","section":"标签","summary":"","title":"Firebase","type":"tags"},{"content":"","externalUrl":null,"permalink":"/series/hmadeos-part01/","section":"Series","summary":"","title":"HmadeOS-Part01","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/hmadeos-part02/","section":"Series","summary":"","title":"HmadeOS-Part02","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/hmadeos-part03/","section":"Series","summary":"","title":"HmadeOS-Part03","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/hmadeos-part04/","section":"Series","summary":"","title":"HmadeOS-Part04","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/hmadeos-part05/","section":"Series","summary":"","title":"HmadeOS-Part05","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/hmadeos-part06/","section":"Series","summary":"","title":"HmadeOS-Part06","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/likes/","section":"标签","summary":"","title":"Likes","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/os/","section":"标签","summary":"","title":"OS","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/physics/","section":"标签","summary":"","title":"Physics","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/project/","section":"标签","summary":"","title":"Project","type":"tags"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/series/sokoban/","section":"Series","summary":"","title":"Sokoban","type":"series"},{"content":" This is Toy Computer! ","externalUrl":null,"permalink":"/projects/games/sokoban/","section":"All Projects","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  This is Toy Computer!\n\u003c/div\u003e\n\n\u003chr\u003e","title":"Sokoban Game","type":"projects"},{"content":"","externalUrl":null,"permalink":"/tags/turing-machine/","section":"标签","summary":"","title":"Turing Machine","type":"tags"},{"content":"","externalUrl":null,"permalink":"/tags/views/","section":"标签","summary":"","title":"Views","type":"tags"},{"content":" This is Toy Computer! ","externalUrl":null,"permalink":"/projects/games/other/","section":"All Projects","summary":"\u003cdiv class=\"lead text-neutral-500 dark:text-neutral-400 !mb-9 text-xl\"\u003e\n  This is Toy Computer!\n\u003c/div\u003e\n\n\u003chr\u003e","title":"XXX Game","type":"projects"},{"content":"这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\n你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\n","externalUrl":null,"permalink":"/tags/advanced/","section":"标签","summary":"\u003cp\u003e这是高级标记。类似其他 Blowfish 中的其他列表页面，你可以在分类列表页添加自定义内容，这部分内容会显示在顶部。\u0026#x1f680;\u003c/p\u003e\n\u003cp\u003e你也可以用这些内容来定义 Hugo 的元数据，比如标题和描述。这些内容可以被用来增强 SEO 或其他目的。\u003c/p\u003e","title":"高级","type":"tags"}]